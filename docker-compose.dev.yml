version: "2.2"

services:
  query_interface:
    build:
      context: ./client
      target: development-build-stage
      dockerfile: Dockerfile
    container_name: query_interface
    environment:
      - ENV=development
    ports:
      - 5000:5000
    volumes:
      - ./client:/app
      - /app/node_modules
    restart: "unless-stopped"
    depends_on:
      - ingestor_server
    networks:
      - elastic_network

  ingestor_server:
    build:
      context: ./server
      target: development-build-stage
      dockerfile: Dockerfile
    container_name: ingestor_server
    ports:
      - 3000:3000
    environment:
      - ELASTIC_URL=http://es01:9200
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - PORT=3000
      - LOG_FORMAT=tiny
    volumes:
      - ./server:/app
      - /app/node_modules
    restart: "unless-stopped"
    depends_on:
      es_service_1:
        condition: service_healthy
    networks:
      - elastic_network

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana01
    volumes:
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: '["http://es01:9200","http://es02:9200","http://es03:9200"]'
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD}
    networks:
      - elastic_network
